# desafio-tecnico-veiculos-koprik-main/docker-compose.yml
name: vehicles-stack

services:
  mysql:
    image: mysql:8.0
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_DATABASE: vehicles
      MYSQL_USER: dev
      MYSQL_PASSWORD: dev
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - db_mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"
    healthcheck:
      # Melhor alternativa: executa uma query simples autenticando como root/root
      test: ["CMD-SHELL", "mysql -uroot -proot -e 'SELECT 1' >/dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 30
    networks: [appnet]

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "no"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks: [appnet]

  # PHP-FPM com Laravel (sem expor porta)
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    working_dir: /var/www/html
    environment:
      APP_ENV: local
      APP_DEBUG: "true"
      APP_URL: http://localhost:8000
      FRONTEND_URL: http://localhost:5173

      DB_CONNECTION: mysql
      DB_HOST: mysql
      DB_PORT: 3306
      DB_DATABASE: vehicles
      DB_USERNAME: dev
      DB_PASSWORD: dev

      CACHE_STORE: redis
      CACHE_DRIVER: redis
      QUEUE_CONNECTION: database

      REDIS_HOST: redis
      REDIS_CLIENT: phpredis

      FILESYSTEM_DISK: public
    volumes:
      - ./apps/api:/var/www/html
      - api_storage:/var/www/html/storage
    command: >
        sh -lc "
          mkdir -p storage/app/public bootstrap/cache &&
          chown -R www-data:www-data storage bootstrap/cache || true &&
          chmod -R 775 storage bootstrap/cache || true &&

          php -r \"file_exists('.env') || copy('.env.example','.env');\" &&
          php artisan key:generate --no-interaction || true &&
          php artisan package:discover --ansi || true &&
          php artisan migrate --force --no-interaction &&

          if [ ! -L public/storage ]; then
            rm -rf public/storage
            php artisan storage:link --no-interaction
          fi &&

          php-fpm -F
        "
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "php -v >/dev/null 2>&1 && echo 'ok' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks: [appnet]

  # Nginx que "frenteia" o PHP-FPM
  nginx-api:
    image: nginx:1.27-alpine
    depends_on:
      api:
        condition: service_started
    volumes:
      - ./apps/api/public:/var/www/html/public:ro
      - ./nginx/api.conf:/etc/nginx/conf.d/default.conf:ro
      - api_storage:/var/www/html/storage
    ports:
      - "8000:80"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1/ >/dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks: [appnet]

  web:
    container_name: web-1
    build:
      context: ./apps/web
      dockerfile: Dockerfile
      args:
        # lido no build do Vite; default para acessar a API via Nginx interno
        VITE_API_URL: ${VITE_API_URL:-http://nginx-api/api}
    environment:
      # útil se você também usa runtime em dev/local
      - VITE_API_URL=${VITE_API_URL:-http://nginx-api/api}
    ports:
      - "5173:80"          # Nginx do front exposto na 5173 do host
    depends_on:
      - nginx-api
    networks: [appnet]

volumes:
  db_mysql_data:
  api_storage:

networks:
  appnet:
